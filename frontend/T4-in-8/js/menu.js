;
(function (global, factory) {
    //MODULE EXPORTS
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
            //AMD MODULE
            typeof define === 'function' && define.amd ? define(factory) :
            //GLOBAL REFERENCE
            global.Menu = factory($, document);

})(this, function ($, document) {
    'use strict';

    /**
     * Class that handles the Menu behaviour.
     * @param {boolean} auto Auto render a menu
     * @param {string} type Sets the menu behaviour
     * @constructor
     */
    var Menu = function (auto, type) {
        //CONSTANTS
        this.SELECTEDCLASS = "menu-selected";
        /**
         * Callback function that will be called upon selecting a category.
         * @protected
         * @type {number}
         */
        this.selectCallback = null;
        /**
         * List of all available categoires as pair of key-value.
         * @type {Object}
         * @protected
         */
        this.categories = {};
        /**
         * JQuery object that contains the available menu holders
         * @type {JQuery}
         * @protected
         */
        this.JQmenuHolder = $('ul[data-menu="categories"]');

        /**
         * Sets if there will be an auto-generated inside the selected
         * jQuery or if the menu will be rendered from the menu's items.
         * @protected
         * @type {boolean}
         */
        this.autoGenerated = auto;
        /**
         * Sets the menu behaviour
         * @protected
         * @type {boolean}
         */
        this.menuType = type;
        /**
         * Category stack currently being dispatched by the menu
         * @protected
         * @type {Array}
         */
        this.categoryStack = [];


        this.init();

    };

    //PROTO
    Menu.prototype = {
        /**
         * Inital sets
         * @private
         * @returns {undefined}
         */
        init: function () {
            if (!this.autogenerated) {
                var me = this;

                this.JQmenuHolder.each(function () {
                    $(this).children("li").each(function () {
                        me.setLiEvent($(this));
                    });
                });
            }
        },
        /**
         * This menu will render
         * @public
         * @returns {undefined}
         */
        addCatetories: function (categories) {
            if (this.autogenerated) {
                for (var i = 0; i < categories; i++) {
                    var cat = categories[i];
                    if (!this.categories[cat]) {
                        this.categories[cat] = true;

                        this.render(cat);
                    }
                }
            }
        },
        /**
         * Resets the current menu.
         * @public
         * @returns {undefined}
         */
        reset: function () {
            if (this.autoGenerated) {
                this.JQmenuHolder.children().remove();
                this.categories = {};
            }
        },
        /**
         * Sets a callback for the onselect event.
         * @param {function} cb Callback
         * @returns {undefined}
         */
        onSelect: function (cb) {
            this.selectCallback = cb;
        },
        /**
         * Given a set of elements this method will return if the elements
         * matches the current stack of the menu.
         * @param {Array} elements Elements to evaluate
         * @public
         * @returns {boolean}
         */
        matches: function (elements) {
            var fn = this.matchingElements();
            
            if (fn) {
                return fn.call(this, elements, this.categoryStack);
            }

            return false;
        },
        /**
         * Initiates the menu element for each category.
         * @param {string} category Category to render.
         * @private
         * @returns {undefined}
         */
        render: function (category) {
            if (category) {
                var li = $(document.createElement("li"));
                var me = this;

                li.text(category);
                li.attr("data-categories", category);


                this.JQmenuHolder.append(li);

                this.setLiEvent(li);
            }
        },
        /**
         * Executes the callback set by "onSelect" method.
         * @private
         * @returns {undefined}
         */
        dispatchData: function () {
            this.selectCallback && this.selectCallback.call(this, this.categoryStack);
        },
        /**
         * Adds data to the category stack
         * @private
         * @param {string|Array} data
         * @returns {undefined}
         */
        addToData: function (data) {
            if ((typeof data).toLowerCase() == "string") {
                data = data.split(",");
            }

            this.categoryStack = this.arrayUnique(this.categoryStack.concat(data));

        },
        /**
         * Removes data from the category stack
         * @private
         * @param {string|Array} data
         * @returns {undefined}
         */
        removeFromData: function (data) {
            if ((typeof data).toLowerCase() == "string") {
                data = data.split(",");
            }

            var ca = this.categoryStack;
            for (var i = 0; i < data.length; i++) {
                var cin = ca.indexOf(data[i]);
                if (cin !== -1) {
                    ca.splice(cin, 1);
                }
            }

            this.categoryStack = ca;
        },
        /**
         * Uniques the given array element
         * @private
         * @param {Array} array
         * @returns {Array}
         */
        arrayUnique: function (array) {
            var a = array.concat();
            for (var i = 0; i < a.length; ++i) {
                for (var j = i + 1; j < a.length; ++j) {
                    if (a[i] === a[j])
                        a.splice(j--, 1);
                }
            }

            return a;
        },
        /**
         * Gets the matching function according the behaviour
         * @private
         * @returns {Function}
         */
        matchingElements: function () {
            var me = this;
            switch (this.menuType) {
                case Menu.TYPE_FILTER:
                case Menu.TYPE_FILTER_AND_STACK:
                    return function (element,selected) {
                        
                        for(var i = 0; i < selected.length; i++){
                            if(element.indexOf(selected[i])===-1){
                                return false;
                            }
                        }
                        return true;
                    };

                case Menu.TYPE_MATCH_ANY:
                case Menu.TYPE_MATCH_ANY_AND_STACK:
                    
                    return function (element,selected) {
                        
                        for(var i = 0; i < element.length; i++){
                            if(selected.indexOf(element[i])!==-1){
                                return true;
                            }
                        }
                        return false;
                    };

            }
        },
        /**
         * Sets the event click on the li elements.
         * @private
         * @param {jQuery} li
         * @returns {undefined}
         */
        setLiEvent: function (li) {
            var me = this;

            switch (this.menuType) {
                case Menu.TYPE_FILTER:
                case Menu.TYPE_MATCH_ANY:

                    li.on("click.category", function () {
                        var cl = $(this);
                        var lis = me.JQmenuHolder.children("li");
                        var data = cl.attr("data-categories");

                        lis.removeClass(me.SELECTEDCLASS);
                        cl.addClass(me.SELECTEDCLASS);
                        
                        me.categoryStack = data.split(",");
                        me.dispatchData(cl);
                    });


                    break;

                case Menu.TYPE_FILTER_AND_STACK:
                case Menu.TYPE_MATCH_ANY_AND_STACK:

                    li.on("click.category", function () {
                        var cl = $(this);
                        var data = cl.attr("data-categories");

                        if (cl.hasClass(me.SELECTEDCLASS)) {
                            me.removeFromData(data);
                            cl.removeClass(me.SELECTEDCLASS);
                        } else {
                            me.addToData(data);
                            cl.addClass(me.SELECTEDCLASS);
                        }

                        me.dispatchData(cl);
                    });

                    break;


            }




        }
    };

    /**
     * Menu type that will send only the category currently selected
     * and allows only one item to be selected at a time. Items will have to
     * match the category
     * @static
     * @constant
     */
    Menu.TYPE_FILTER = "type_filter";
    /**
     * Menu type that will send only the categories currently selected
     * and all selected item's categories will stack up. Items will have to
     * match the stack
     * @static
     * @constant
     */
    Menu.TYPE_FILTER_AND_STACK = "type_filter_and_stack";
    /**
     * Menu type that will send the selected category only. If the item
     * intersects in any way match will be positive
     * @static
     * @constant
     */
    Menu.TYPE_MATCH_ANY = "type_match_any";
    /**
     * Menu type that will send the selected stack. If the item intersects
     * in any way, match will be positive.
     * @static
     * @constant
     */
    Menu.TYPE_MATCH_ANY_AND_STACK = "type_match_any";

    //FACTORY's FINAL OBJECT
    return Menu;
});
